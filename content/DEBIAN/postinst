#!/bin/bash

rmo(){

echo "removing non-used services"

for f in avahi-daemon.override \
bootmisc.sh.conf \
checkfs.sh.conf \
checkroot-bootclean.sh.conf \
checkroot.sh.conf \
console.conf \
cron.override \
hostname.conf \
hostname.override \
mountall-bootclean.sh.conf \
mountall.sh.conf \
mountdevsubfs.sh.conf \
mountkernfs.sh.conf \
mountnfs.sh.conf \
mtab.sh.conf \
network-interface-container.conf \
network-interface-security.conf \
network-interface-security.override \
portmap-wait.conf \
progress-reboot.conf \
rpcbind-boot.conf \
rpcbind-boot.override \
startpar-bridge.conf \
statd-mounting.conf \
statd-mounting.override \
tty3.conf \
tty3.override \
tty4.conf \
tty4.override \
tty5.conf \
tty5.override \
tty6.conf \
tty6.override \
udev-fallback-graphics.conf \
udev-fallback-graphics.override \
udevmonitor.conf \
udevmonitor.override \
xbian-waiter.conf \
module-init-tools.override \
udevtrigger.override \
udev.override; do rm -fr /etc/init/$f; done

}

if [ $1 == "configure" ]; then

	rm /home/xbian/xbian-update.log >/dev/null 2>&1

	/usr/bin/splash --infinitebar --msgtxt="installing update..."

        version1011() {

	echo "installing update to 1.0-1.1"; 

	echo "3) Turning off rainbow screen"

	if grep -q "disable_splash=1" /boot/config.txt;	then
	        echo "Notice: rainbow already off" >> /home/xbian/xbian-update.log;
        else
                echo -e "\ndisable_splash=1\n" >> /boot/config.txt
		if grep -q "disable_splash=1" /boot/config.txt; then
			echo "Success: rainbow off" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: rainbow off" >> /home/xbian/xbian-update.log; 
		fi
	fi

	grep "rootfstype=ext4" /proc/cmdline && tune2fs -L xbian-root-btrfs $(findmnt -n -o SOURCE /)

	echo "4) Changing default overclock"

	if [ $(grep "core_freq=375" /boot/config.txt| wc -l) -eq 1 ];	then
		sed -i 's/core_freq=375/core_freq=275/g' /boot/config.txt
		if [ $(grep "core_freq=275" /boot/config.txt | wc -l) -eq 1 ];	then
			echo "Success: changed core_freq to 275" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to set core_freq to 275" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: core_freq 275 already set" >> /home/xbian/xbian-update.log; 
	fi

	echo "5) Changing fanartres"

	if [ $(grep "<fanartres>540</fanartres>" /home/xbian/.xbmc/userdata/advancedsettings.xml| wc -l) -eq 1 ];	then
		sed -i 's:<fanartres>540</fanartres>:<fanartres>720</fanartres>:g' /home/xbian/.xbmc/userdata/advancedsettings.xml 
		if [ $(grep "<fanartres>720</fanartres>" /home/xbian/.xbmc/userdata/advancedsettings.xml| wc -l) -eq 1 ];	then
			echo "Success: changed fanartres to 720" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to set fanartres to 720" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: detected a manual fanartres setting, not changing" >> /home/xbian/xbian-update.log; 
	fi

	echo "6) Changing imagres"

	if [ $(grep "<imageres>256</imageres>" /home/xbian/.xbmc/userdata/advancedsettings.xml| wc -l) -eq 1 ];	then
		sed -i 's:<imageres>256</imageres>:<imageres>540</imageres>:g' /home/xbian/.xbmc/userdata/advancedsettings.xml 
		if [ $(grep "<imageres>540</imageres>" /home/xbian/.xbmc/userdata/advancedsettings.xml| wc -l) -eq 1 ];	then
			echo "Success: changed imageres to 540" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to set imageres to 540" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: detected a manual fanartres setting, not changing" >> /home/xbian/xbian-update.log; 
	fi

	echo "7) Adding SuperRepo"

	if [ $(grep "<name>SuperRepo.org Virtual Disk</name>" /home/xbian/.xbmc/userdata/sources.xml| wc -l) -eq 0 ];	then
        sed -i 's|<files>|<files>\n\t<default pathversion="1"></default>\n\t\t<name>SuperRepo.org Virtual Disk</name>\n\t\t<path pathversion="1">http://use.superrepo.org/Frodo</path>|g' /home/xbian/.xbmc/userdata/sources.xml
		if [ $(grep "<name>SuperRepo.org Virtual Disk</name>" /home/xbian/.xbmc/userdata/sources.xml| wc -l) -eq 1 ];	then
			echo "Success: changed Fusion to SuperRepo" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to change Fusion to SuperRepo" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: Fusion already replaced by SuperRepo" >> /home/xbian/xbian-update.log; 
	fi

	echo "8) Modifying avahi-deamon defaults"

	if [ $(grep "AVAHI_DAEMON_DETECT_LOCAL=1"  /etc/default/avahi-daemon| wc -l) -eq 1 ];	then
		sed -i 's:AVAHI_DAEMON_DETECT_LOCAL=1:AVAHI_DAEMON_DETECT_LOCAL=0:g' /etc/default/avahi-daemon
		if [ $(grep "AVAHI_DAEMON_DETECT_LOCAL=0" /etc/default/avahi-daemon| wc -l) -eq 1 ];	then
			echo "Success: modified avahi-deamon defaults" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to modified avahi-deamon defaults" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: avahi-deamon defaults already modified" >> /home/xbian/xbian-update.log; 
	fi

	echo "9) Disable watchdog"

	if [ $(grep "run_watchdog=1"  /etc/default/watchdog| wc -l) -eq 1 ];	then
		sed -i 's:run_watchdog=1:run_watchdog=0:g' /etc/default/watchdog
        update-rc.d watchdog remove >/dev/null 2>&1
        sed -i '/bcm2708_wdog/d' /etc/modules
		if [ $(grep "run_watchdog=0" /etc/default/watchdog| wc -l) -eq 1 ];	then
			echo "Success: disabled watchdog" >> /home/xbian/xbian-update.log; 
		else
			echo "Error: failed to disable watchdog" >> /home/xbian/xbian-update.log; 
		fi
	else
		echo "Notice: watchdog already disabled" >> /home/xbian/xbian-update.log; 
	fi

    echo "10) Symlink /usr/lib/vfp to /opt/vc/lib"

    if [ -f "/usr/lib/vfp" -o  -d "/usr/lib/vfp" ];	then
        rm -r /usr/lib/vfp
        if [ -f "/usr/lib/vfp" -o  -d "/usr/lib/vfp" ];	then
            echo "Error: failed to remove /usr/lib/vfp" >> /home/xbian/xbian-update.log;
        fi
    fi

    ln -s /opt/vc/lib /usr/lib/vfp
    if [ -L "/usr/lib/vfp" ];	then
        echo "Success: symlinked /usr/lib/vfp to /opt/vc/lib" >> /home/xbian/xbian-update.log;
    else
        echo "Failed: to symlink /usr/lib/vfp to /opt/vc/lib" >> /home/xbian/xbian-update.log;
    fi

    echo "11) Enable auto fsck on boot"

    if [ $(grep "#FSCKFIX=no" /etc/default/rcS| wc -l) -eq 1 ];	then
        sed -i 's/#FSCKFIX=no/FSCKFIX=yes/g' /etc/default/rcS
        if [ $(grep "^FSCKFIX=yes" /etc/default/rcS| wc -l) -eq 1 ];	then
            echo "Success: enable auto fsck on boot" >> /home/xbian/xbian-update.log;
        else
            echo "Error: enable auto fsck on boot" >> /home/xbian/xbian-update.log;
        fi
    else
        echo "Notice: enable auto fsck on boot already set" >> /home/xbian/xbian-update.log;
    fi

    echo "12) Disabling DELAYLOGIN service"

    if [ $(grep -c ^"DELAYLOGIN=no" /etc/default/rcS) -eq 1 ]; then
        echo "Notice: DELAYLOGIN already disabled" >> /home/xbian/xbian-update.log
    else
        sed -i 's/DELAYLOGIN=yes/DELAYLOGIN=no/g' /etc/default/rcS
        sed -i 's/#DELAYLOGIN=no/DELAYLOGIN=no/g' /etc/default/rcS
        sed -i 's/#DELAYLOGIN=yes/DELAYLOGIN=no/g' /etc/default/rcS
        if [ $(grep -c ^"DELAYLOGIN=no" /etc/default/rcS) -eq 0 ]; then
            echo "DELAYLOGIN=no" >> /etc/default/rcS
        fi

        echo "Success: disabled DELAYLOGIN" >> /home/xbian/xbian-update.log
    fi

    echo "13) Remove klogd & sysklogd from update-rc.d"
    update-rc.d klogd remove >/dev/null 2>&1;
    update-rc.d sysklogd remove >/dev/null 2>&1;

    echo "14a) Removing swapfile from /etc/fstab"

    if [ $(grep '/var/swapfile' /etc/fstab| wc -l) -eq 1 ];	then
        sed -i '/\/var\/swapfile/d' /etc/fstab
        if [ $(grep '/var/swapfile' /etc/fstab| wc -l) -eq 0 ];	then
            echo "Success: removing swapfile from /etc/fstab" >> /home/xbian/xbian-update.log;

            echo "14b) Removing /var/swapfile"

            if [ -f "/var/swapfile" ];	then
                swapoff /var/swapfile
                rm /var/swapfile
                if [ ! -f "/var/swapfile" ];	then
                    echo "Success: removing /var/swapfile" >> /home/xbian/xbian-update.log;
                else
                    echo "Error: removing /var/swapfile" >> /home/xbian/xbian-update.log;
                fi
            else
                echo "Notice: /var/swapfile already removed" >> /home/xbian/xbian-update.log;
            fi

        else
            echo "Error: removing swapfile from /etc/fstab" >> /home/xbian/xbian-update.log;
        fi
    else
            echo "Notice: swapfile already removed from /etc/fstab" >> /home/xbian/xbian-update.log;
    fi

    echo "15) Adding /boot to /etc/fstab"

    if [ $(grep /boot /etc/fstab | grep -c "noauto,user,uid=0,gid=0") -eq 0 ];	then
        grep -v /boot /etc/fstab > /etc/fstab.new; mv /etc/fstab.new /etc/fstab
        echo "UUID=$(blkid /dev/mmcblk0p1 -o value -s UUID)	/boot	vfat	defaults,noauto,user,gid=0,uid=0	0	0" >> /etc/fstab
        if [ $(grep -c /boot /etc/fstab ) -eq 1 ]; then
            echo "Success: adding /boot to /etc/fstab" >> /home/xbian/xbian-update.log;

        else
            echo "Error: adding /boot to /etc/fstab" >> /home/xbian/xbian-update.log;
        fi
    else
            echo "Notice: /boot already present in /etc/fstab" >> /home/xbian/xbian-update.log;
    fi
    mountpoint -q /boot && mount -o remount /boot

	echo "16) Applying patches"

cat <<\EOF > /tmp/001-tmpfs.patch
--- a/etc/default/tmpfs
+++ b/etc/default/tmpfs
@@ -8,25 +8,25 @@
 # mount /run/lock as a tmpfs (separately from /run).  Defaults to yes;
 # set to no to disable (/run/lock will then be part of the /run tmpfs,
 # if available).
-#RAMLOCK=yes
+RAMLOCK=yes
 
 # mount /run/shm as a tmpfs (separately from /run).  Defaults to yes;
 # set to no to disable (/run/shm will then be part of the /run tmpfs,
 # if available).
-#RAMSHM=yes
+RAMSHM=yes
 
 # mount /tmp as a tmpfs.  Defaults to no; set to yes to enable (/tmp
 # will be part of the root filesystem if disabled).  /tmp may also be
 # configured to be a separate mount in /etc/fstab.
-#RAMTMP=no
+RAMTMP=no
 
 # Size limits.  Please see tmpfs(5) for details on how to configure
 # tmpfs size limits.
 #TMPFS_SIZE=20%VM
-#RUN_SIZE=10%
-#LOCK_SIZE=5242880 # 5MiB
-#SHM_SIZE=
-#TMP_SIZE=
+RUN_SIZE=10240
+LOCK_SIZE=5120
+SHM_SIZE=2048
+#TMP_SIZE=20480
 
 # Mount tmpfs on /tmp if there is less than the limit size (in kiB) on
 # the root filesystem (overriding RAMTMP).
EOF

	patch --dry-run /etc/default/tmpfs < /tmp/001-tmpfs.patch 2>/dev/null >/dev/null;
	if [ $? == 0 ]; then
		patch /etc/default/tmpfs < /tmp/001-tmpfs.patch 2>/dev/null >/dev/null;
		echo "Success: applied 001-tmpfs.patch" >> /home/xbian/xbian-update.log;
	else
		echo "Error: 001-tmpfs.patch can't be applied" >> /home/xbian/xbian-update.log;
	fi
	echo "001-tmpfs.patch done"

cat <<\EOF > /tmp/002-sysctl.patch
--- a/etc/sysctl.conf
+++ b/etc/sysctl.conf
@@ -4,7 +4,7 @@
 # See sysctl.conf (5) for information.
 #
 
-#kernel.domainname = example.com
+kernel.domainname = private
 
 # Uncomment the following to stop low-level messages on console
 kernel.printk = 3 4 1 3
@@ -60,5 +60,11 @@
 #
 
 # rpi tweaks
-vm.swappiness=1
-vm.min_free_kbytes = 8192
+vm.swappiness = 70
+vm.dirty_ratio = 65
+vm.dirty_background_ratio = 40
+vm.vfs_cache_pressure = 150
+vm.min_free_kbytes = 16384
+kernel.msgmax = 65536
+kernel.msgmnb = 65536
+kernel.sem = 250 256000 32 1024
EOF

	patch --dry-run /etc/sysctl.conf < /tmp/002-sysctl.patch 2>/dev/null >/dev/null;
	if [ $? == 0 ]; then
		patch /etc/sysctl.conf < /tmp/002-sysctl.patch 2>/dev/null >/dev/null;
		echo "Success: applied 002-sysctl.patch" >> /home/xbian/xbian-update.log;
	else
		echo "Error: 002-sysctl.patch can't be applied" >> /home/xbian/xbian-update.log;
	fi
	echo "002-sysctl.patch done"

	ldconfig >/dev/null 2>&1

	echo "17) updating sysv init scripts and adapting system"
	
        insserv -fr /etc/init.d/checkfs.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/checkroot.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mountall-bootclean.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mountall.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mountdevsubfs.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mountkernfs.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mountnfs-bootclean.sh > /dev/null 2>&1
        insserv -fr /etc/init.d/mtab.sh > /dev/null 2>&1

	insserv -fr /etc/init.d/urandom > /dev/null 2>&1
	insserv -fr /etc/init.d/hdparm > /dev/null 2>&1
	insserv -fr /etc/init.d/rmnologin > /dev/null 2>&1
	insserv -fr /etc/init.d/udev-mtab > /dev/null 2>&1
	insserv -fr /etc/init.d/watchdog > /dev/null 2>&1
	insserv -fr /etc/init.d/xbmc > /dev/null 2>&1
	insserv -fr /etc/init.d/hwclock.sh > /dev/null 2>&1
	insserv -fr /etc/init.d/console-screen.sh > /dev/null 2>&1
	insserv -fr /etc/init.d/kbd > /dev/null 2>&1
	insserv -fr /etc/init.d/keyboard-setup > /dev/null 2>&1
	insserv -fr /etc/init.d/wd_keepalive > /dev/null 2>&1
	insserv -fr /etc/init.d/plymouth > /dev/null 2>&1
	insserv -fr /etc/init.d/plymouth-log > /dev/null 2>&1
	insserv -fr /etc/init.d/sudo > /dev/null 2>&1
	insserv -rf /etc/init.d/avahi-daemon > /dev/null 2>&1
	insserv -rf /etc/init.d/dbus > /dev/null 2>&1
	insserv -rf /etc/init.d/udev > /dev/null 2>&1
	insserv -rf /etc/init.d/ntp > /dev/null 2>&1
	insserv -f > /dev/null 2>&1

        test -e /etc/inittab && mv /etc/inittab /etc/inittab.dist
        rm -f /etc/nologin
        rm -fr /var/tmp/{init,init.d,to_remove,etc} 
	echo "Success: sysvinit and initctl updated" >> /home/xbian/xbian-update.log

	echo "18) removing obsolete files"
	rm -f /usr/local/lib/libtag.a
	rm -f /usr/local/lib/libtag_c.a
	echo "Success: files removed" >> /home/xbian/xbian-update.log

        echo "1.0Beta1" > /etc/xbian_version

	#echo "---UPDATE LOG---"
	#cat "/home/xbian/xbian-update.log"
        }
############################## 1.0-1.1 END   ###################################
        1011f() {
        echo "checking for Beta 1.1 hotfix"
        ! grep -xq "1.0Beta1.1" /etc/xbian_version ||  return 0
        [ ! -e /tmp/xbian_revision.old ] || { [ "$(cat /tmp/xbian_revision.old | grep -m1 .)" -lt 10 ] || return 0; }

        echo "installing update to Beta 1.1 hotfix"
	echo "1.0Beta1.1" > /etc/xbian_version

	insserv -rf /etc/init.d/avahi-daemon > /dev/null 2>&1
	insserv -rf /etc/init.d/dbus > /dev/null 2>&1

	locale-gen

    if [ $(grep /boot /etc/fstab | grep -c "noauto") -eq 1 ];	then
        grep -v /boot /etc/fstab > /etc/fstab.new; mv /etc/fstab.new /etc/fstab
        echo "UUID=$(blkid /dev/mmcblk0p1 -o value -s UUID)	/boot	vfat	defaults 	0	0" >> /etc/fstab
        if [ $(grep -c /boot /etc/fstab ) -eq 0 ]; then
            echo "Error: adding /boot to /etc/fstab" >> /home/xbian/xbian-update.log
        fi
    fi
    mountpoint -q /boot && mount -o remount /boot


	cd /usr/share/polkit-1/actions

cat << \EOF > /tmp/udisks.patch
--- org.freedesktop.udisks.policy       2012-08-01 00:00:00.000000000 +0200
+++ org.freedesktop.udisks.policy.new   2013-06-30 20:10:16.000000000 +0200
@@ -81,7 +81,7 @@
     <message xml:lang="de">Zugriffsrechte werden benötigt um ein Gerät auszuhängen, das ein anderer Benutzer eingehängt hat</message>
     <message xml:lang="pt_BR">Autenticação é requerida para desmontar dispositivos montados por um outro usuário</message>
     <defaults>
-      <allow_any>no</allow_any>
+      <allow_any>yes</allow_any>
       <allow_inactive>no</allow_inactive>
       <allow_active>auth_admin</allow_active>
     </defaults>
EOF

	if patch -N --dry-run ./org.freedesktop.udisks.policy < /tmp/udisks.patch > /dev/null 2>&1; then
	    patch -s ./org.freedesktop.udisks.policy < /tmp/udisks.patch || echo "udisks patch failed" >> /home/xbian/xbian-update.log
	fi
	rm -fr /tmp/udisks.patch
        
        }
############################## 1.0-1.1 fix END   ###################################

        version1012() {

            1011f 
            echo "installing update to 1.0 Beta 2"
            cp -ar --remove-destination /var/tmp/xbian_update/files_to_overwrite/* / > /dev/null 2>&1

            if btrfs-auto-snapshot listvol | grep -xq modules; then
                echo "modules volume already exists"
                if ! mountpoint -q /lib/modules; then
                    mv /lib/modules /lib/modules.old
                    mkdir /lib/modules; mount -t btrfs -o subvol=modules/@ $(findmnt / -n -o SOURCE -v) /lib/modules
                    for m in $(ls /lib/modules.old); do
                        [ -e /lib/modules/$m ] ||  mv /lib/modules.old/$m /lib/modules/$m
                    done
                    rm -fr /lib/modules.old
                fi
            else
                echo "moving modules directory"
                btrfs-auto-snapshot createvol modules > /dev/null 2>&1
                btrfs-auto-snapshot createvol modules/@ > /dev/null 2>&1
                td=$(mktemp -d)
                mount -t btrfs -o subvol=modules/@ $(findmnt / -n -o SOURCE -v) $td
                cp -ar /lib/modules/* $td > /dev/null 2>&1
                umount $td
                rm -fr /lib/modules/*
                if mount -t btrfs -o subvol=modules/@ $(findmnt / -n -o SOURCE -v) /lib/modules; then
                    echo "done"
                else
                    echo "something wrong happened, your xbian may not boot successfully after restart. disabling restart after update finish"
                    touch /run/noreboot
                fi
            fi

            echo "updating services"
            #rcS.d
            insserv -rf /etc/init.d/checkroot-bootclean.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/hostname.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/kmod > /dev/null 2>&1
            insserv -fr /etc/init.d/procps > /dev/null 2>&1
            insserv -fr /etc/init.d/bootmisc.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/screen-cleanup > /dev/null 2>&1
            insserv -fr /etc/init.d/rpcbind > /dev/null 2>&1
            insserv -fr /etc/init.d/nfs-common > /dev/null 2>&1
            insserv -fr /etc/init.d/udev > /dev/null 2>&1 

            insserv -fr /etc/init.d/checkfs.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/checkroot.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/mountall-bootclean.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/mountall.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/mountdevsubfs.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/mountkernfs.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/mountnfs-bootclean.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/mtab.sh > /dev/null 2>&1
            insserv -fr /etc/init.d/kbd  > /dev/null 2>&1

            #rc2.d
            insserv -fr bootlogs  > /dev/null 2>&1
            insserv -fr /etc/init.d/cron > /dev/null 2>&1
            insserv -fr /etc/init.d/anacron > /dev/null 2>&1
            insserv -fr /etc/init.d/ntp > /dev/null 2>&1
            insserv -fr /etc/init.d/ssh > /dev/null 2>&1
            insserv -fr nrg-tools > /dev/null 2>&1
            insserv -fr cron > /dev/null 2>&1
            insserv -fr anacron > /dev/null 2>&1
            insserv -fr iguanaIR > /dev/null 2>&1
            insserv -fr rsync > /dev/null 2>&1
            insserv -fr avahi-daemon > /dev/null 2>&1
            insserv -fr networking > /dev/null 2>&1
            insserv -fr dbus > /dev/null 2>&1
            insserv -fr console-setup > /dev/null 2>&1
            insserv -fr mountnfs.sh > /dev/null 2>&1
            insserv -fr motd > /dev/null 2>&1

            #rc6.d
            insserv -fr /etc/init.d/kexec > /dev/null 2>&1
            insserv -fr /etc/init.d/kexec-load > /dev/null 2>&1
            insserv -fr /etc/init.d/kbd  > /dev/null 2>&1
            insserv -fr xbian-waiter > /dev/null 2>&1
            insserv -fr rsyslog > /dev/null 2>&1
            insserv -fr winbind > /dev/null 2>&1

            rm -f /etc/init.d/rpcbind > /dev/null 2>&1
            rm -f /etc/init.d/nfs-common > /dev/null 2>&1
            rm -f /etc/init/xbmc-screensaver-wait.conf > /dev/null 2>&1
            rm -f /etc/init/dbus-reconnect.conf > /dev/null 2>&1

            rmo

            insserv -f /etc/init.d/unmountnfs.sh > /dev/null 2>&1
            insserv -f > /dev/null 2>&1
            initctl -q reload-configuration

            echo "updating modules"

            sed -i '/frandom/d' /etc/modules
            sed -i '/bcm2708-rng/d' /etc/modules
            sed -i '/deadline-iosched/d' /etc/modules
            sed -i '/cfq-iosched/d' /etc/modules
            grep -q btrfs /etc/modules || echo btrfs >> /etc/modules
	    grep -q vfat /etc/modules || echo vfat >> /etc/modules  
	    grep -q usb_storage /etc/modules || echo usb_storage >> /etc/modules  


            grep -iv ^"AddressFamily" /etc/ssh/sshd_config > /etc/ssh/sshd_config.new
            grep -iv ^"UseDNS" /etc/ssh/sshd_config.new > /etc/ssh/sshd_config.new.2
            rm -f /etc/ssh/sshd_config.new
            echo "AddressFamily inet" >> /etc/ssh/sshd_config.new.2
            echo "UseDNS no" >> /etc/ssh/sshd_config.new.2
            mv /etc/ssh/sshd_config.new.2 /etc/ssh/sshd_config

            echo "checking interfaces"
            if grep "auto" /etc/network/interfaces | grep -q "eth0"; then
                :
            else
                if ip link show eth0 | grep UP | grep -q DEFAULT; then
                    echo "auto eth0" > /etc/network/interfaces.new
                    cat /etc/network/interfaces >> /etc/network/interfaces.new
                    mv /etc/network/interfaces.new /etc/network/interfaces
                fi
            fi

            echo "patching files"
            for f in $(ls /var/tmp/xbian_update/diffs/*_1012 2>/dev/null); do
                if patch -s -N --dry-run -p0 < $f > /dev/null 2>&1; then
                    patch -s -p0 < $f || { echo "patch $f failed"; echo "patch $f failed" >> /home/xbian/xbian-update.log; }
                fi
            done

            while read line; do 
                [ -n "$line" ] && grep -v "$line" /etc/sysctl.conf > /etc/sysctl.conf.new
                mv /etc/sysctl.conf.new /etc/sysctl.conf
            done < /var/tmp/xbian_update/pchanges/sysctl.conf

            find /etc/ -iname \*~ | xargs -L1 rm -f > /dev/null 2>&1

            sed 's/<guires>720<\/guires>/<guires>1080<\/guires>/g' -i /home/xbian/.xbmc/userdata/advancedsettings.xml
            rm -fr /home/xbian/.xbmc/userdata/autoexec.py

            echo "changing virtual filesystem parameters and recreating initramfs.gz."
            #dpkg-trigger --no-await trigger-xbian-update-initramfs
            xbian-update-initramfs > /dev/null 2>&1

            if grep -wq "/tmp" /etc/fstab; then
                grep -wv "/tmp" /etc/fstab > /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi

            if grep -wq "/" /etc/fstab; then
                grep -wv "/" /etc/fstab >> /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi

            if grep -wq "/home" /etc/fstab; then
                grep -wv "/home" /etc/fstab > /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi

            if grep -wq "/proc" /etc/fstab; then
                grep -wv "/proc" /etc/fstab > /etc/fstab.new
                mv /etc/fstab.new /etc/fstab
            fi

            if ! grep -wq "/run/user" /etc/fstab; then
                echo "none            /run/user                       tmpfs                   noauto                  0       0" >> /etc/fstab
            fi
            if ! grep -wq "/sys/kernel/security" /etc/fstab; then
                echo "none            /sys/kernel/security            securityfs              noauto                  0       0" >> /etc/fstab
            fi
            if ! grep -wq "/sys/kernel/debug" /etc/fstab; then
                echo "none            /sys/kernel/debug               debugfs                 noauto                  0       0" >> /etc/fstab
            fi

            cat /etc/fstab | sort > /etc/fstab.new
            mv /etc/fstab.new /etc/fstab

            echo "1.0Beta1.2" > /etc/xbian_version

        }

############################## 1.0-1.2 END   ###################################
        
        version=$(dpkg-query -W -f='${Version}\n' "xbian-update" | sed 's/[\.-]//g')
        [ -n "$version" ] || vesion='1000'
        while test $(($version / 1000)) -eq 0; do version=$(($version *10)); done

        if [ -e /run/xbian-update-force ]; then
            version='1000'
            rm /tmp/xbian_revision.old || :
        fi

        [ $version -lt 1011 ] && version1011
        [ $version -lt 1012 -o $version -eq 1012 ] && version1012

        # update cmdline.txt subvol parameter to what it was during boot
        subvolume=$(cat /proc/cmdline); subvolume=${subvolume#*rootfsopts=subvol=}; subvolume=${subvolume%%\/@*};
        snap=$(cat /proc/cmdline); snap=${snap#*rootfsopts=subvol=$subvolume"/@"}; snap=${snap%%,*}; 

        cp /boot/cmdline.new /boot/cmdline.default
        cat /boot/cmdline.new | eval $(echo "sed 's/rootfsopts=subvol=root\/@/rootfsopts=subvol=$subvolume\/@$snap/'") > /boot/cmdline.txt
        mv /boot/cmdline.txt /boot/cmdline.new

        rootdev=$(cat /proc/cmdline); rootdev=${rootdev##*root=}; rootdev=${rootdev%% *}
        cat /boot/cmdline.new | eval $(echo "sed 's/root=LABEL=xbian-root-btrfs/root=$rootdev/'") > /boot/cmdline.txt

###############################################################################

	chown -Rc xbian:xbian /home/xbian >/dev/null 2>&1
	rm -fr /var/tmp/xbian_update


	if ! status -q xbian-update-reboot; then
cat << \EOF > /tmp/xbian-update-reboot
#!/bin/sh

while { pgrep dpkg >/dev/null|| pgrep apt-get >/dev/null; } ; do sleep 5; done
echo "XBian update completed, rebooting..."
/usr/bin/splash --infinitebar --msgtxt="stopping services..."
for f in $(ls /etc/rc2.d/S* | sort -r); do
	[ -x $f ] && $f stop
done
apt-get clean
sleep 5
sync
[ ! -e /run/noreboot ] ||  exit 0
/usr/bin/splash --infinitebar --msgtxt="rebooting..."
reboot -f

EOF
	    chmod +x /tmp/xbian-update-reboot
	    /tmp/xbian-update-reboot &
	else
	    start -qn xbian-update-reboot
	fi

fi

mountpoint -q /boot && umount /boot || true

exit 0


